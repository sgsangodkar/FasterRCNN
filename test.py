#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 12 05:44:51 2021

@author: sagar
"""
import torch
import time

a
Out[5]: 
tensor([[[[ 0,  1,  2,  3],
          [ 4,  5,  6,  7]],

         [[ 8,  9, 10, 11],
          [12, 13, 14, 15]]]])

b
Out[6]: 
tensor([[[ 0,  1,  2,  3],
         [ 4,  5,  6,  7],
         [ 8,  9, 10, 11],
         [12, 13, 14, 15]]])

a.shape
Out[7]: torch.Size([1, 2, 2, 4])

b.shape
Out[8]: torch.Size([1, 4, 4])


########################################
import numpy as np
import six
def generate_anchor_base(base_size=16, ratios=[0.5, 1, 2],
                         anchor_scales=[8, 16, 32]):
    """Generate anchor base windows by enumerating aspect ratio and scales.
    Generate anchors that are scaled and modified to the given aspect ratios.
    Area of a scaled anchor is preserved when modifying to the given aspect
    ratio.
    :obj:`R = len(ratios) * len(anchor_scales)` anchors are generated by this
    function.
    The :obj:`i * len(anchor_scales) + j` th anchor corresponds to an anchor
    generated by :obj:`ratios[i]` and :obj:`anchor_scales[j]`.
    For example, if the scale is :math:`8` and the ratio is :math:`0.25`,
    the width and the height of the base window will be stretched by :math:`8`.
    For modifying the anchor to the given aspect ratio,
    the height is halved and the width is doubled.
    Args:
        base_size (number): The width and the height of the reference window.
        ratios (list of floats): This is ratios of width to height of
            the anchors.
        anchor_scales (list of numbers): This is areas of anchors.
            Those areas will be the product of the square of an element in
            :obj:`anchor_scales` and the original area of the reference
            window.
    Returns:
        ~numpy.ndarray:
        An array of shape :math:`(R, 4)`.
        Each element is a set of coordinates of a bounding box.
        The second axis corresponds to
        :math:`(y_{min}, x_{min}, y_{max}, x_{max})` of a bounding box.
    """
    py = base_size / 2.
    px = base_size / 2.

    anchor_base = np.zeros((len(ratios) * len(anchor_scales), 4),
                           dtype=np.float32)
    for i in six.moves.range(len(ratios)):
        for j in six.moves.range(len(anchor_scales)):
            h = base_size * anchor_scales[j] * np.sqrt(ratios[i])
            w = base_size * anchor_scales[j] * np.sqrt(1. / ratios[i])

            index = i * len(anchor_scales) + j
            anchor_base[index, 0] = py - h / 2.
            anchor_base[index, 1] = px - w / 2.
            anchor_base[index, 2] = py + h / 2.
            anchor_base[index, 3] = px + w / 2.
    return anchor_base

a = generate_anchor_base()

img_size = (800,800)
receptive_field=16
scales=[8,16,32]
ratios=[0.5,1,2]
b = gen_anchors(img_size, receptive_field, scales, ratios)

########################################
bboxes_gt = torch.randn(10,4)
classes_gt=torch.tensor([5,1,0,2,3,4,4,5,6,2]) # GT classes of 10 GT bounding boxes
gt_id = torch.tensor([1,2,3,1,5,9]) # Overlapping GT id for 6 ROIs
indx_v = torch.tensor([1,2,4,5]) # Valid indices for ROIs
n_neg = 2

since=time.time()
cls_gt_v = torch.tensor(list(map(lambda x:classes_gt[x]+1, gt_id[indx_v])))
cls_gt_v[n_neg:]=0
bboxes_v = torch.vstack(list(map(lambda x:bboxes_gt[x], gt_id[indx_v])))
print(time.time()-since)

since=time.time()
cls_gt_v = classes_gt[gt_id[indx_v]]+1
cls_gt_v[n_neg:]=0
bboxes_v = bboxes_gt[gt_id[indx_v]]
print(time.time()-since)
#0.0007402896881103516
#0.0006067752838134766
########################

bboxes_gt = torch.randn(10,4)
classes_gt=torch.tensor([5,1,0,2,3,4,4,5,6,2]) # GT classes of 10 GT bounding boxes
gt_id = torch.randint(10,(100,)) # Overlapping GT id for 6 ROIs
indx_v = torch.randint(100,(50,)) # Valid indices for ROIs
n_neg = 50

since=time.time()
cls_gt_v = torch.tensor(list(map(lambda x:classes_gt[x]+1, gt_id[indx_v])))
cls_gt_v[n_neg:]=0
bboxes_v = torch.vstack(list(map(lambda x:bboxes_gt[x], gt_id[indx_v])))
print(time.time()-since)

since=time.time()
cls_gt_v = classes_gt[gt_id[indx_v]]+1
cls_gt_v[n_neg:]=0
bboxes_v = bboxes_gt[gt_id[indx_v]]
print(time.time()-since)
#0.0015075206756591797
#0.0008707046508789062
#########################################
import torch

a = torch.tensor([1.0,2.0,3.0], requires_grad=True)

b = torch.tensor([1.0], requires_grad=True)

c = a+b

print(a,b,c)

op=c.sum()

#d = c.detach()
d = a.data
op.backward()


d[0]=0

op.backward()

c[2]=6

op.backward()

a.grad


bboxes_gt = torch.randn((10,4))
class_gt = torch.arange(1,11)
mask = torch.where(class_gt>8)[0]
